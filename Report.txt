SimpleSecureLogin System

1. Introduction

This report provides an overview of the `SimpleSecureLogin` Python application. The application implements a basic yet secure user authentication system. It incorporates industry-standard practices for password storage and adds an additional layer of security through Two-Factor Authentication (2FA) using Time-based One-Time Passwords (TOTP). User data is persisted in a local JSON file.

2. System Overview

The `SimpleSecureLogin` system is designed to manage user registration and secure login processes. It focuses on protecting user credentials through robust hashing and verification mechanisms and enhances account security with mandatory 2FA. The core functionality is encapsulated within the `SimpleSecureLogin` class.

3. Core Components and Functionality

The system is built around the `SimpleSecureLogin` class, which handles all aspects of user management:

 Data Persistence (`data_file`, `load_users`, `save_users`):
       User information (hashed passwords, 2FA secrets) is stored in a JSON file (default: `users.json`).
      `load_users`: Reads user data from the JSON file upon initialization. Handles cases where the file doesn't exist or is corrupted by returning an empty user dictionary.
      `save_users`: Writes the current in-memory user data back to the JSON file, ensuring persistence across program runs.

 Secure Password Management (`hash_password`, `verify_password`):
    *   `hash_password`: Uses the PBKDF2-HMAC-SHA256 algorithm with a high iteration count (100,000) and a unique, cryptographically secure random salt for each password. This protects against brute-force and rainbow table attacks. The salt and the resulting hash are concatenated and stored.
    *   `verify_password`: Retrieves the stored salt, re-hashes the user-provided password using the same salt and parameters, and securely compares the computed hash with the stored hash using `secrets.compare_digest` to prevent timing attacks.

 Two-Factor Authentication (2FA) (`setup_2fa`, `verify_2fa`):
    *   `setup_2fa`: Generates a unique Base32 secret key for a user using the `pyotp` library. This secret is stored and associated with the user. It provides a provisioning URI (containing the secret, username, and issuer name) that can be scanned by an authenticator app (like Google Authenticator or Microsoft Authenticator) or the secret key for manual entry. It saves the secret immediately.
    *   `verify_2fa`: Uses the stored secret to create a TOTP object. It validates a 6-digit code entered by the user against the code generated by the authenticator app for the current time window, allowing for minor clock drift.

 User Management (`register`, `login`):
    *   `register`:
        1.  Checks for username uniqueness.
        2.  Enforces password policies (minimum 8 characters, must not contain the username).
        3.  Stores the user's information with a hashed password and initializes the 2FA secret.
        4.  Automatically initiates and guides the user through the 2FA setup process.
        5.  Requires the user to successfully verify a 2FA code immediately after setup to confirm it works before completing registration.
    *   `login`:
        1.  Verifies the existence of the username.
        2.  Authenticates the user's password using the secure `verify_password` method.
        3.  Prompts the user for the current 2FA code from their authenticator app.
        4.  Validates the 2FA code using the `verify_2fa` method.
        5.  Grants access only if both password and 2FA are correct.

  Main Execution Block (`if __name__ == "__main__"`):
    *   Provides a simple command-line interface for users to choose between registering a new account or logging into an existing one.
    *   Instantiates the `SimpleSecureLogin` class.
    *   Handles user input for username and password for both registration and login flows.
    *   Calls the appropriate methods (`register` or `login`) based on user choice.

4. Security Features

*   Password Hashing: PBKDF2 with SHA256 and a unique salt per password ensures strong protection against various password cracking techniques.
*   Timing Attack Resistance: Uses `secrets.compare_digest` for password verification to prevent attackers from gaining information based on response time differences.
*   Two-Factor Authentication: Mandatory TOTP 2FA significantly increases account security by requiring something the user *has* (their phone/app) in addition to something they *know* (their password).
*   Secure Randomness: Utilizes the `secrets` module for generating salts and the `pyotp` library for generating 2FA secrets, ensuring cryptographic strength.

5. Dependencies

*   `hashlib`: For the PBKDF2 hashing algorithm.
*   `secrets`: For generating cryptographically secure random numbers (salts, 2FA secrets).
*   `pyotp`: For generating and verifying TOTP codes.
*   `json`: For reading and writing user data to a file.
*   `os`: For checking file existence.

6. Testing

To ensure the reliability and correctness of the `SimpleSecureLogin` system, a test suite (`TestSimpleSecureLogin`) has been implemented using Python's built-in `unittest` framework. This suite isolates tests from the main user data file by using temporary files and validates key functionalities.

*   **Purpose of Testing:**
    The primary purpose of the test suite is to automatically verify that the core functionalities of the `SimpleSecureLogin` class behave as expected under various conditions. This helps in:
    *   Catching regressions: Ensuring new changes don't break existing features.
    *   Validating logic: Confirming that user registration, login, password hashing/verification, and 2FA setup/validation work correctly according to the defined rules.
    *   Improving code quality: Providing confidence in the code's behavior and making future maintenance safer.

*   **Test Suite Description (`TestSimpleSecureLogin`):**
    The test class `TestSimpleSecureLogin` inherits from `unittest.TestCase` and contains several test methods:
    *   **Setup and Teardown (`setUp`, `tearDown`)**:
        *   `setUp`: Runs before each test. It creates a temporary, unique JSON file for user data, ensuring tests don't interfere with each other or the main `users.json`. An instance of `SimpleSecureLogin` is created using this temporary file.
        *   `tearDown`: Runs after each test. It cleans up by deleting the temporary file created in `setUp`.
    *   **Registration Tests (`test_register_new_user`, `test_register_existing_user`, `test_register_short_password`, `test_register_password_contains_username`)**:
        *   Tests successful registration of a new user.
        *   Ensures that attempting to register with an already existing username fails.
        *   Validates that passwords shorter than 8 characters are rejected.
        *   Confirms that passwords containing the username are rejected.
    *   **Login Tests (`test_login_wrong_password`, `test_login_non_existing_user`)**:
        *   Checks that login fails with an incorrect password.
        *   Verifies that login fails for a username that doesn't exist.
    *   **Password Hashing/Verification Tests (`test_hash_password_differs_each_time`, `test_verify_correct_password`, `test_verify_wrong_password`)**:
        *   Confirms that hashing the same password twice produces different results due to the unique salt.
        *   Ensures that `verify_password` correctly returns `True` when the provided password matches the stored hash.
        *   Ensures that `verify_password` correctly returns `False` when the provided password is incorrect.

7. Conclusion

The `SimpleSecureLogin` system demonstrates a practical implementation of secure user authentication in Python. By combining strong password hashing with mandatory Time-based One-Time Password (TOTP) 2FA, it provides a robust defense against common authentication threats. The use of standard libraries and clear separation of concerns in the class design makes the system understandable and maintainable. The command-line interface offers a straightforward way for users to interact with the registration and login processes. The accompanying `unittest` suite provides automated verification of critical functionalities, enhancing the system's reliability.

8. Future Improvements

While the `SimpleSecureLogin` system provides a solid foundation for secure authentication, several enhancements could be made to increase its robustness, usability, and scalability:
*   **Input Masking for Passwords:** The current command-line interface accepts passwords in plain text. Integrating libraries like `getpass` would prevent passwords from being visible on the screen during entry.
*   **Graceful Handling of 2FA Setup Interruption:** If a user interrupts the 2FA setup process (e.g., closes the program during the initial code entry), the partially registered user account might be left in an inconsistent state. Adding logic to clean up incomplete registrations would improve robustness.
*   **Account Lockout Mechanism:** Implementing a mechanism to temporarily lock accounts after a certain number of failed login attempts could help mitigate brute-force attacks.
*   **Password Strength Validation:** Beyond length and username inclusion checks, integrating checks for complexity (e.g., requiring uppercase, lowercase, numbers, special characters) or using a library to evaluate password strength (like `zxcvbn`) would enhance security.
*   **User Logout/Session Management:** Adding functionality to explicitly log out and manage user sessions (though challenging in a simple CLI without a server) could be a conceptual step towards more complex applications.
*   **Database Integration:** Replacing the JSON file storage with a proper database system (e.g., SQLite, PostgreSQL) would significantly improve scalability, performance, and data integrity for larger user bases.
*   **Graphical User Interface (GUI):** Developing a GUI using libraries like Tkinter, PyQt, or Kivy would make the application more user-friendly than the command-line interface.
*   **Backup and Recovery:** Implementing mechanisms for backing up user data and recovering accounts (e.g., via email verification codes) would add resilience against data loss.
*   **Enhanced Error Handling:** Expanding error handling beyond file I/O (e.g., handling network issues if integrating with external services, providing more specific error messages) could make the system more robust.
*   **Logging:** Implementing a logging system to record significant events (registrations, failed logins, errors) would be beneficial for auditing and debugging.

9. References

*   Python Software Foundation. (n.d.). hashlib --- Secure hashes and message digests. Retrieved from https://docs.python.org/3/library/hashlib.html
*   Python Software Foundation. (n.d.). secrets --- Generate secure random numbers for managing secrets. Retrieved from https://docs.python.org/3/library/secrets.html
*   The PyOTP Project. (n.d.). PyOTP: The Python One-Time Password Library. Retrieved from https://pyauth.github.io/pyotp/
*   Python Software Foundation. (n.d.). json --- JSON encoder and decoder. Retrieved from https://docs.python.org/3/library/json.html
*   Python Software Foundation. (n.d.). os.path --- Common pathname manipulations. Retrieved from https://docs.python.org/3/library/os.path.html
*   Python Software Foundation. (n.d.). tempfile --- Generate temporary files and directories. Retrieved from https://docs.python.org/3/library/tempfile.html
*   Python Software Foundation. (n.d.). unittest --- Unit testing framework. Retrieved from https://docs.python.org/3/library/unittest.html
*   Python Software Foundation. (n.d.). getpass --- Portable password input. Retrieved from https://docs.python.org/3/library/getpass.html (For future improvement suggestion)
*   IETF. (2000). RFC 2898: PKCS #5: Password-Based Cryptography Specification Version 2.0. Retrieved from https://www.rfc-editor.org/rfc/rfc2898.html
*   IETF. (2011). RFC 6238: TOTP: Time-Based One-Time Password Algorithm. Retrieved from https://www.rfc-editor.org/rfc/rfc6238.html
*   OWASP Foundation. (2023). Password Storage Cheat Sheet. Retrieved from https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
*   OWASP Foundation. (2023). Authentication Cheat Sheet. Retrieved from https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html (For account lockout, session management concepts)